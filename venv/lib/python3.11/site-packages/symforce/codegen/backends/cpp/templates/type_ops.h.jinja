{# ----------------------------------------------------------------------------
 # SymForce - Copyright 2022, Skydio, Inc.
 # This source code is under the Apache 2.0 license found in the LICENSE file.
 # ---------------------------------------------------------------------------- #}

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

// Import all the known types.
#include <sym/ops/lie_group_ops.h>
#include <sym/ops/storage_ops.h>
{% for cls in sf.GEO_TYPES + sf.CAM_TYPES %}
#include <sym/{{ python_util.camelcase_to_snakecase(cls.__name__) }}.h>
{% endfor %}
#include <sym/util/typedefs.h>

#include <lcmtypes/sym/type_t.hpp>

namespace sym {

template <typename T>
static constexpr const bool kIsEigenType = std::is_base_of<Eigen::MatrixBase<T>, T>::value;

template <typename T>
static constexpr const bool kIsSparseEigenType =
    std::is_base_of<Eigen::SparseMatrix<typename T::Scalar>, T>::value;

/**
 * Helper to handle polymorphism by creating a switch from a runtime type enum to dispatch
 * to the templated method func. Used to perform type-aware operations.
 *
 * Args:
 *   name: Name of the output function (ex: FormatByType)
 *   func: Name of a function template (ex: FormatHelper)
 */
#define BY_TYPE_HELPER(name, func)                                     \
  template <typename Scalar, typename... Args>                         \
  auto name(const type_t type, Args&&... args) {                       \
    switch (type.value) {                                              \
      {% for cls in sf.GEO_TYPES %}
      case type_t::{{ python_util.camelcase_to_screaming_snakecase(cls.__name__) }}: \
        return func<sym::{{ cls.__name__ }}<Scalar>>(args...);           \
      {% endfor %}
      case type_t::SCALAR:                                             \
        return func<Scalar>(args...);                                  \
        {% for i in range(1, 10) %}
      case type_t::VECTOR{{ i }}:                                      \
        return func<Eigen::Matrix<Scalar, {{ i }}, 1>>(args...);       \
        {% endfor %}
        {% for i in range(1, 10) %}
        {% for j in range(2, 10) %}
      case type_t::MATRIX{{ i }}{{ j }}:                               \
        return func<Eigen::Matrix<Scalar, {{ i }}, {{ j }}>>(args...); \
        {% endfor %}
        {% endfor %}
      {% for cls in sf.CAM_TYPES %}
      case type_t::{{ python_util.camelcase_to_screaming_snakecase(cls.__name__) }}: \
        return func<sym::{{ cls.__name__ }}<Scalar>>(args...);         \
      {% endfor %}
      default:                                                         \
        SYM_ASSERT(false);                                             \
    }                                                                  \
  }

}  // namespace sym
