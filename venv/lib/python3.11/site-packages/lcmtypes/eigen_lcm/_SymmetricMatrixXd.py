# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# isort: off
# mypy: disallow-untyped-defs

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct

class SymmetricMatrixXd(object):
    __slots__ = ["data_sz", "data"]  # type: T.List[str]

    def __init__(
        self,
        data_sz=0,  # type: int
        data=None,  # type: T.Sequence[float]
        _skip_initialize=False,  # type: bool
    ):
        # type: (...) -> None
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        self.data_sz = data_sz
        self.data = [] if data is None else data  # type: T.Sequence[float]

    @staticmethod
    def from_all_fields(
        data_sz,  # type: int
        data,  # type: T.Sequence[float]
    ):
        # type: (...) -> SymmetricMatrixXd
        return SymmetricMatrixXd(
            data_sz=data_sz,
            data=data,
        )

    @staticmethod
    def _skytype_meta():
        # type: () -> T.Dict[str, str]
        return dict(
            type="struct",
            package="eigen_lcm",
            name="SymmetricMatrixXd",
        )

    @classmethod
    def _default(cls):
        # type: () -> SymmetricMatrixXd
        return cls()

    def __repr__(self):
        # type: () -> str
        return "SymmetricMatrixXd({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other):
        # type: (object) -> bool
        if not isinstance(other, SymmetricMatrixXd):
            return NotImplemented
        return (
            (self.data_sz==other.data_sz) and
            (self.data==other.data)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore

    def encode(self):
        # type: () -> bytes
        buf = BytesIO()
        buf.write(SymmetricMatrixXd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        # type: (T.BinaryIO) -> None
        buf.write(SymmetricMatrixXd._CACHED_STRUCT_0.pack(self.data_sz))
        buf.write(struct.pack('>%dd' % self.data_sz, *self.data[:self.data_sz]))

    @staticmethod
    def decode(data):
        # type: (T.Union[bytes, T.BinaryIO]) -> SymmetricMatrixXd
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != SymmetricMatrixXd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SymmetricMatrixXd._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        # type: (T.BinaryIO) -> SymmetricMatrixXd
        self = SymmetricMatrixXd(_skip_initialize=True)
        self.data_sz = SymmetricMatrixXd._CACHED_STRUCT_0.unpack(buf.read(4))[0]
        self.data = struct.unpack('>%dd' % self.data_sz, buf.read(self.data_sz * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        # type: (T.List[T.Type]) -> int
        if SymmetricMatrixXd in parents: return 0
        tmphash = (0xf2cd494c850188b) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint = None  # type: T.Optional[bytes]

    @staticmethod
    def _get_packed_fingerprint():
        # type: () -> bytes
        if SymmetricMatrixXd._packed_fingerprint is None:
            SymmetricMatrixXd._packed_fingerprint = struct.pack(">Q", SymmetricMatrixXd._get_hash_recursive([]))
        return SymmetricMatrixXd._packed_fingerprint

    def deepcopy(self, **kwargs):
        # type: (**T.Any) -> SymmetricMatrixXd
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type SymmetricMatrixXd does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result

    _CACHED_STRUCT_0 = struct.Struct(">i")
