# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# isort: off
# mypy: disallow-untyped-defs

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct
from lcmtypes.eigen_lcm._MatrixXd import MatrixXd
from lcmtypes.eigen_lcm._VectorXd import VectorXd

class linearized_dense_factor_t(object):
    __slots__ = ["residual", "jacobian", "hessian", "rhs"]  # type: T.List[str]

    def __init__(
        self,
        residual=None,  # type: VectorXd
        jacobian=None,  # type: MatrixXd
        hessian=None,  # type: MatrixXd
        rhs=None,  # type: VectorXd
        _skip_initialize=False,  # type: bool
    ):
        # type: (...) -> None
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        # b
        self.residual = VectorXd._default() if residual is None else residual  # type: VectorXd
        # J
        self.jacobian = MatrixXd._default() if jacobian is None else jacobian  # type: MatrixXd
        # H, JtJ
        self.hessian = MatrixXd._default() if hessian is None else hessian  # type: MatrixXd
        # Jtb
        self.rhs = VectorXd._default() if rhs is None else rhs  # type: VectorXd

    @staticmethod
    def from_all_fields(
        residual,  # type: VectorXd
        jacobian,  # type: MatrixXd
        hessian,  # type: MatrixXd
        rhs,  # type: VectorXd
    ):
        # type: (...) -> linearized_dense_factor_t
        return linearized_dense_factor_t(
            residual=residual,
            jacobian=jacobian,
            hessian=hessian,
            rhs=rhs,
        )

    @staticmethod
    def _skytype_meta():
        # type: () -> T.Dict[str, str]
        return dict(
            type="struct",
            package="sym",
            name="linearized_dense_factor_t",
        )

    @classmethod
    def _default(cls):
        # type: () -> linearized_dense_factor_t
        return cls()

    def __repr__(self):
        # type: () -> str
        return "linearized_dense_factor_t({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other):
        # type: (object) -> bool
        if not isinstance(other, linearized_dense_factor_t):
            return NotImplemented
        return (
            (self.residual==other.residual) and
            (self.jacobian==other.jacobian) and
            (self.hessian==other.hessian) and
            (self.rhs==other.rhs)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore

    def encode(self):
        # type: () -> bytes
        buf = BytesIO()
        buf.write(linearized_dense_factor_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        # type: (T.BinaryIO) -> None
        if hasattr(self.residual, '_get_packed_fingerprint'):
            assert self.residual._get_packed_fingerprint() == VectorXd._get_packed_fingerprint()
        else:
            assert self.residual._get_hash_recursive([]) == VectorXd._get_hash_recursive([])
        self.residual._encode_one(buf)
        if hasattr(self.jacobian, '_get_packed_fingerprint'):
            assert self.jacobian._get_packed_fingerprint() == MatrixXd._get_packed_fingerprint()
        else:
            assert self.jacobian._get_hash_recursive([]) == MatrixXd._get_hash_recursive([])
        self.jacobian._encode_one(buf)
        if hasattr(self.hessian, '_get_packed_fingerprint'):
            assert self.hessian._get_packed_fingerprint() == MatrixXd._get_packed_fingerprint()
        else:
            assert self.hessian._get_hash_recursive([]) == MatrixXd._get_hash_recursive([])
        self.hessian._encode_one(buf)
        if hasattr(self.rhs, '_get_packed_fingerprint'):
            assert self.rhs._get_packed_fingerprint() == VectorXd._get_packed_fingerprint()
        else:
            assert self.rhs._get_hash_recursive([]) == VectorXd._get_hash_recursive([])
        self.rhs._encode_one(buf)

    @staticmethod
    def decode(data):
        # type: (T.Union[bytes, T.BinaryIO]) -> linearized_dense_factor_t
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != linearized_dense_factor_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return linearized_dense_factor_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        # type: (T.BinaryIO) -> linearized_dense_factor_t
        self = linearized_dense_factor_t(_skip_initialize=True)
        self.residual = VectorXd._decode_one(buf)
        self.jacobian = MatrixXd._decode_one(buf)
        self.hessian = MatrixXd._decode_one(buf)
        self.rhs = VectorXd._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        # type: (T.List[T.Type]) -> int
        if linearized_dense_factor_t in parents: return 0
        newparents = parents + [linearized_dense_factor_t]
        tmphash = (0xed8e513fb9421d9+ VectorXd._get_hash_recursive(newparents)+ MatrixXd._get_hash_recursive(newparents)+ MatrixXd._get_hash_recursive(newparents)+ VectorXd._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint = None  # type: T.Optional[bytes]

    @staticmethod
    def _get_packed_fingerprint():
        # type: () -> bytes
        if linearized_dense_factor_t._packed_fingerprint is None:
            linearized_dense_factor_t._packed_fingerprint = struct.pack(">Q", linearized_dense_factor_t._get_hash_recursive([]))
        return linearized_dense_factor_t._packed_fingerprint

    def deepcopy(self, **kwargs):
        # type: (**T.Any) -> linearized_dense_factor_t
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type linearized_dense_factor_t does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result
