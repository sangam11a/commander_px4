# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# isort: off
# mypy: disallow-untyped-defs

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct
from lcmtypes.eigen_lcm._MatrixXf import MatrixXf
from lcmtypes.eigen_lcm._VectorXf import VectorXf
from lcmtypes.sym._values_t import values_t

class optimization_iteration_t(object):
    __slots__ = ["iteration", "current_lambda", "new_error_linear", "new_error", "relative_reduction", "update_accepted", "update_angle_change", "values", "residual", "jacobian_values"]  # type: T.List[str]

    def __init__(
        self,
        iteration=0,  # type: int
        current_lambda=0.0,  # type: float
        new_error_linear=0.0,  # type: float
        new_error=0.0,  # type: float
        relative_reduction=0.0,  # type: float
        update_accepted=False,  # type: bool
        update_angle_change=0.0,  # type: float
        values=None,  # type: values_t
        residual=None,  # type: VectorXf
        jacobian_values=None,  # type: MatrixXf
        _skip_initialize=False,  # type: bool
    ):
        # type: (...) -> None
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        # Zero-indexed iteration number (Information before the first iteration is
        # included at index -1)
        self.iteration = iteration
        # Value of lambda at this iteration
        self.current_lambda = current_lambda
        # Error after the iteration, using the linearized cost
        self.new_error_linear = new_error_linear
        # Error after the iteration, using the full nonlinear cost function
        self.new_error = new_error
        # Relative reduction in error between the initial and updated states for
        # this iteration
        self.relative_reduction = relative_reduction
        # Was the update accepted?
        self.update_accepted = update_accepted
        # Angle between previous update and current update
        self.update_angle_change = update_angle_change
        # The values, residual, and jacobian are only populated when debug_stats is true,
        # otherwise they are size 0
        # The Values at this step
        self.values = values_t._default() if values is None else values  # type: values_t
        # The problem residual
        self.residual = VectorXf._default() if residual is None else residual  # type: VectorXf
        # The problem jacobian exactly if dense, or as CSC format sparse data column vector if sparse
        self.jacobian_values = MatrixXf._default() if jacobian_values is None else jacobian_values  # type: MatrixXf

    @staticmethod
    def from_all_fields(
        iteration,  # type: int
        current_lambda,  # type: float
        new_error_linear,  # type: float
        new_error,  # type: float
        relative_reduction,  # type: float
        update_accepted,  # type: bool
        update_angle_change,  # type: float
        values,  # type: values_t
        residual,  # type: VectorXf
        jacobian_values,  # type: MatrixXf
    ):
        # type: (...) -> optimization_iteration_t
        return optimization_iteration_t(
            iteration=iteration,
            current_lambda=current_lambda,
            new_error_linear=new_error_linear,
            new_error=new_error,
            relative_reduction=relative_reduction,
            update_accepted=update_accepted,
            update_angle_change=update_angle_change,
            values=values,
            residual=residual,
            jacobian_values=jacobian_values,
        )

    @staticmethod
    def _skytype_meta():
        # type: () -> T.Dict[str, str]
        return dict(
            type="struct",
            package="sym",
            name="optimization_iteration_t",
        )

    @classmethod
    def _default(cls):
        # type: () -> optimization_iteration_t
        return cls()

    def __repr__(self):
        # type: () -> str
        return "optimization_iteration_t({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other):
        # type: (object) -> bool
        if not isinstance(other, optimization_iteration_t):
            return NotImplemented
        return (
            (self.iteration==other.iteration) and
            (self.current_lambda==other.current_lambda) and
            (self.new_error_linear==other.new_error_linear) and
            (self.new_error==other.new_error) and
            (self.relative_reduction==other.relative_reduction) and
            (self.update_accepted==other.update_accepted) and
            (self.update_angle_change==other.update_angle_change) and
            (self.values==other.values) and
            (self.residual==other.residual) and
            (self.jacobian_values==other.jacobian_values)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore

    def encode(self):
        # type: () -> bytes
        buf = BytesIO()
        buf.write(optimization_iteration_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        # type: (T.BinaryIO) -> None
        buf.write(optimization_iteration_t._CACHED_STRUCT_0.pack(self.iteration, self.current_lambda, self.new_error_linear, self.new_error, self.relative_reduction, self.update_accepted, self.update_angle_change))
        if hasattr(self.values, '_get_packed_fingerprint'):
            assert self.values._get_packed_fingerprint() == values_t._get_packed_fingerprint()
        else:
            assert self.values._get_hash_recursive([]) == values_t._get_hash_recursive([])
        self.values._encode_one(buf)
        if hasattr(self.residual, '_get_packed_fingerprint'):
            assert self.residual._get_packed_fingerprint() == VectorXf._get_packed_fingerprint()
        else:
            assert self.residual._get_hash_recursive([]) == VectorXf._get_hash_recursive([])
        self.residual._encode_one(buf)
        if hasattr(self.jacobian_values, '_get_packed_fingerprint'):
            assert self.jacobian_values._get_packed_fingerprint() == MatrixXf._get_packed_fingerprint()
        else:
            assert self.jacobian_values._get_hash_recursive([]) == MatrixXf._get_hash_recursive([])
        self.jacobian_values._encode_one(buf)

    @staticmethod
    def decode(data):
        # type: (T.Union[bytes, T.BinaryIO]) -> optimization_iteration_t
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != optimization_iteration_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return optimization_iteration_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        # type: (T.BinaryIO) -> optimization_iteration_t
        self = optimization_iteration_t(_skip_initialize=True)
        self.iteration, self.current_lambda, self.new_error_linear, self.new_error, self.relative_reduction = optimization_iteration_t._CACHED_STRUCT_1.unpack(buf.read(18))
        self.update_accepted = bool(optimization_iteration_t._CACHED_STRUCT_2.unpack(buf.read(1))[0])
        self.update_angle_change = optimization_iteration_t._CACHED_STRUCT_3.unpack(buf.read(4))[0]
        self.values = values_t._decode_one(buf)
        self.residual = VectorXf._decode_one(buf)
        self.jacobian_values = MatrixXf._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        # type: (T.List[T.Type]) -> int
        if optimization_iteration_t in parents: return 0
        newparents = parents + [optimization_iteration_t]
        tmphash = (0x76b498b648d06fb3+ values_t._get_hash_recursive(newparents)+ VectorXf._get_hash_recursive(newparents)+ MatrixXf._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint = None  # type: T.Optional[bytes]

    @staticmethod
    def _get_packed_fingerprint():
        # type: () -> bytes
        if optimization_iteration_t._packed_fingerprint is None:
            optimization_iteration_t._packed_fingerprint = struct.pack(">Q", optimization_iteration_t._get_hash_recursive([]))
        return optimization_iteration_t._packed_fingerprint

    def deepcopy(self, **kwargs):
        # type: (**T.Any) -> optimization_iteration_t
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type optimization_iteration_t does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result

    _CACHED_STRUCT_0 = struct.Struct(">hffffbf")
    _CACHED_STRUCT_1 = struct.Struct(">hffff")
    _CACHED_STRUCT_2 = struct.Struct("b")
    _CACHED_STRUCT_3 = struct.Struct(">f")
